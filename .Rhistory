opt6[["AIC"]] = 2*opt6$objective + 2*length(opt6$par)
Report6 = obj6$report()
SD6 = sdreport( obj6, bias.correct=FALSE )
opt6b <- bobyqa(par = obj6$env$last.par.best[-c(obj6$env$random)], fn = obj6$fn)
Report6b = obj6b$report()
opt6b[["AIC"]] = 2*opt6b$fval + 2*length(opt6b$par)
SD6b <- sdreport(obj6, bias.correct=FALSE )
#--------------------------------------------------
#----------------- Spatial + Temporal ------------------
# Turn off random effects in v1f (0 means exclude a component, except for ObsModel)
Options_vec = c("SpatialTF"=1, "TemporalTF"=1, "SpatiotemporalTF"=0, "DetectabilityTF"=1, "ObsModel"=1, "OverdispersedTF" = 1)
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
# Make object
dyn.load( dynlib(paste0("Code/", Version )))
obj7 <- MakeADFun(data=Inputs$Data, parameters=Inputs$Params, random=Inputs$Random, map=Inputs$Map, hessian=FALSE, inner.control=list(maxit=1000) )
# First run
obj7$fn( obj7$par )
# Check for parameters that don't do anything
Which = which( obj7$gr( obj7$par )==0 )
# Run model
opt7 = nlminb(start=obj7$env$last.par.best[-c(obj7$env$random)], objective=obj7$fn, gradient=obj7$gr, control=list(eval.max=1e4, iter.max=1e4, trace=1, rel.tol=1e-14) )
opt7[["final_gradient"]] = obj7$gr( opt7$par )
opt7[["AIC"]] = 2*opt7$objective + 2*length(opt7$par)
Report7 = obj7$report()
SD7 = sdreport( obj7, bias.correct=FALSE )
opt7b <- bobyqa(par = obj7$env$last.par.best[-c(obj7$env$random)], fn = obj7$fn)
Report7b = obj7$report(obj7$env$last.par.best)
opt7b[["AIC"]] = 2*opt7b$fval + 2*length(opt7b$par)
SD7b <- sdreport(obj7, bias.correct=FALSE )
#--------------------------------------------------
#----------------- Spatial + Spatiotemporal ------------------
# Turn off random effects in v1f (0 means exclude a component, except for ObsModel)
Options_vec = c("SpatialTF"=1, "TemporalTF"=0, "SpatiotemporalTF"=1, "DetectabilityTF"=1, "ObsModel"=1, "OverdispersedTF"=1, "abundTF"=0)
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
# Make object
dyn.load( dynlib(paste0("Code/", Version )))
obj8 <- MakeADFun(data=Inputs$Data, parameters=Inputs$Params, random=Inputs$Random, map=Inputs$Map, hessian=FALSE, inner.control=list(maxit=1000) )
Report = obj8$report()
# First run
obj8$fn( obj8$par )
#fn_test < obj8$fn(obj8$par)
# Check for parameters that don't do anything
Which = which( obj8$gr( obj8$par )==0 )
# Run model
opt8 = nlminb(start=obj8$env$last.par.best[-c(obj8$env$random)], objective=obj8$fn, gradient=obj8$gr, control=list(eval.max=1e4, iter.max=1e4, trace=1, rel.tol=1e-14) )
opt8[["final_gradient"]] = obj8$gr( opt8$par )
opt8[["AIC"]] = 2*opt8$objective + 2*length(opt8$par)
Report8 = obj8$report()
SD8 = sdreport( obj8, bias.correct=FALSE )
opt8b <- bobyqa(par = obj8$env$last.par.best[-c(obj8$env$random)], fn = obj8$fn)
Report8b = objb$report(obj8$env$last.par.best)
opt8b[["AIC"]] = 2*opt8b$fval + 2*length(opt8b$par)
SD8b <- sdreport(obj8, bias.correct=FALSE )
#--------------------------------------------------
# Convergence
df_convergence <- data.frame(model = 1:8,
message = c(opt1$message, opt2$message, opt3$message, opt4$message, opt5$message, opt6$message, opt7$message, opt8$message),
final_gr = c(max(opt1$final_gradient), max(opt2$final_gradient), max(opt3$final_gradient), max(opt4$final_gradient), max(opt5$final_gradient), max(opt6$final_gradient), max(opt7$final_gradient), max(opt8$final_gradient))) %>%
dplyr::mutate(problem_gr = ifelse(final_gr > 0.001, TRUE, FALSE))
df_convergence
c(opt1b$ierr, opt2b$ierr, opt3b$ierr, opt4b$ierr, opt5b$ierr, opt6b$ierr, opt7b$ierr, opt8b$ierr)
#------------------------------------------------
SD_table <- data.frame(Parameter = names(SD3$value),
SD1 = SD1$sd,
SD2 = SD2$sd,
SD3 = SD3b$sd,
SD4 = SD4b$sd,
SD5 = SD5b$sd,
SD6 = SD6$sd, # fails
SD7 = SD7$sd,
SD8 = SD8$sd, #
stringsAsFactors = FALSE)
for(i in 1:ncol(as.matrix(X_ij))) {
SD_table$Parameter[i] <- colnames(as.matrix(X_ij))[i]
}
format(SD_table, digits = 2, scientific = 5)
############## most models fail - try reduced models ############
#----------------- Spatial Only ------------------
X_ij <- as.matrix(dplyr::select(covs, forest, temp_mean_winter, temp_mean_spring, prcp_mean_winter, prcp_mean_spring))
# Turn off random effects in v1f (0 means exclude a component, except for ObsModel)
Options_vec = c("SpatialTF"=1, "TemporalTF"=0, "SpatiotemporalTF"=0, "DetectabilityTF"=1, "ObsModel"=1, "OverdispersedTF"=1, "abundTF"=0)
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod3r <- runOUGMRF(Inputs)
Mod3r$SD$sd # fails
# Further Reduce
X_ij <- as.matrix(dplyr::select(covs, forest, temp_mean_spring, prcp_mean_winter))
Options_vec = c("SpatialTF"=1, "TemporalTF"=0, "SpatiotemporalTF"=0, "DetectabilityTF"=1, "ObsModel"=1, "OverdispersedTF"=1, "abundTF"=0)
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod3r2 <- runOUGMRF(Inputs)
Mod3r2$SD$sd # success
#----------------- Spatiotemporal Only ------------------
X_ij <- as.matrix(dplyr::select(covs, forest, temp_mean_winter, temp_mean_spring, prcp_mean_winter, prcp_mean_spring))
# Turn off random effects in v1f (0 means exclude a component, except for ObsModel)
Options_vec = c("SpatialTF"=0, "TemporalTF"=0, "SpatiotemporalTF"=1, "DetectabilityTF"=1, "ObsModel"=1, "OverdispersedTF"=1, "abundTF"=0)
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod4r <- runOUGMRF(Inputs)
str(Mod4r)
Mod4r$opt$convergence
Mod4r$SD$sd
# Further Reduce
X_ij <- as.matrix(dplyr::select(covs, forest, temp_mean_spring, prcp_mean_winter))
# Turn off random effects in v1f (0 means exclude a component, except for ObsModel)
Options_vec = c("SpatialTF"=0, "TemporalTF"=0, "SpatiotemporalTF"=1, "DetectabilityTF"=1, "ObsModel"=1, "OverdispersedTF"=1, "abundTF"=0)
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod4r2 <- runOUGMRF(Inputs)
str(Mod4r2)
Mod4r2$opt$convergence
Mod4r2$SD$sd
# final reduction
X_ij <- as.matrix(dplyr::select(covs, forest))
# Turn off random effects in v1f (0 means exclude a component, except for ObsModel)
Options_vec = c("SpatialTF"=0, "TemporalTF"=0, "SpatiotemporalTF"=1, "DetectabilityTF"=1, "ObsModel"=1, "OverdispersedTF"=1, "abundTF"=0)
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod4r3 <- runOUGMRF(Inputs)
str(Mod4r3)
Mod4r3$opt$convergence
Mod4r3$SD$sd
#----------------- Temporal + ST ------------------
X_ij <- as.matrix(dplyr::select(covs, forest, temp_mean_winter, temp_mean_spring, prcp_mean_winter, prcp_mean_spring))
# Turn off random effects in v1f (0 means exclude a component, except for ObsModel)
Options_vec = c("SpatialTF"=0, "TemporalTF"=1, "SpatiotemporalTF"=1, "DetectabilityTF"=1, "ObsModel"=1, "OverdispersedTF" = 1)
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod5r <- runOUGMRF(Inputs)
Mod5r$SD$sd # Fail
# Further Reduce
X_ij <- as.matrix(dplyr::select(covs, forest, temp_mean_spring, prcp_mean_winter))
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod5r2 <- runOUGMRF(Inputs)
str(Mod5r2)
Mod5r2$opt$convergence
Mod5r2$SD$sd # Fails
# Final Reduction
X_ij <- as.matrix(dplyr::select(covs, forest))
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod5r3 <- runOUGMRF(Inputs)
str(Mod5r3)
Mod5r3$opt$convergence
Mod5r3$SD$sd # Fails
#----------------- Spatial Temporal Spatiotemporal Reduced ------------------
# Turn off random effects in v1f (0 means exclude a component, except for ObsModel)
Options_vec = c("SpatialTF"=1, "TemporalTF"=1, "SpatiotemporalTF"=1, "DetectabilityTF"=1, "ObsModel"=1, "OverdispersedTF"=1, "abundTF"=0)
# Final Reduction
X_ij <- as.matrix(dplyr::select(covs, forest))
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod6r3 <- runOUGMRF(Inputs)
str(Mod6r3)
Mod6r3$opt$convergence
Mod6r3$SD$sd # Fails
#----------------- Spatial + Temporal ------------------
X_ij <- as.matrix(dplyr::select(covs, forest, temp_mean_winter, temp_mean_spring, prcp_mean_winter, prcp_mean_spring))
# Turn off random effects in v1f (0 means exclude a component, except for ObsModel)
Options_vec = c("SpatialTF"=1, "TemporalTF"=1, "SpatiotemporalTF"=0, "DetectabilityTF"=1, "ObsModel"=1, "OverdispersedTF" = 1)
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod7r <- runOUGMRF(Inputs)
Mod7r$SD$sd # success
# Further Reduce
X_ij <- as.matrix(dplyr::select(covs, forest, temp_mean_spring, prcp_mean_winter))
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod7r2 <- runOUGMRF(Inputs)
str(Mod7r2)
Mod7r2$opt$convergence
Mod7r2$SD$sd # success
# final reduction - no time-varying covs
X_ij <- as.matrix(dplyr::select(covs, forest))
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod7r3 <- runOUGMRF(Inputs)
str(Mod7r3)
Mod7r3$opt$convergence
Mod7r3$SD$sd
#----------------- Spatial + Spatiotemporal ------------------
X_ij <- as.matrix(dplyr::select(covs, forest, temp_mean_winter, temp_mean_spring, prcp_mean_winter, prcp_mean_spring))
Options_vec = c("SpatialTF"=1, "TemporalTF"=0, "SpatiotemporalTF"=1, "DetectabilityTF"=1, "ObsModel"=1, "OverdispersedTF"=1, "abundTF"=0)
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod8r <- runOUGMRF(Inputs)
str(Mod8r) # fails
# Further Reduce
X_ij <- as.matrix(dplyr::select(covs, forest, temp_mean_spring, prcp_mean_winter))
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod8r2 <- runOUGMRF(Inputs)
str(Mod8r2)
Mod8r2$opt$convergence
Mod8r2$SD$sd # success
# final reduction - no time-varying covs
X_ij <- as.matrix(dplyr::select(covs, forest))
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod8r3 <- runOUGMRF(Inputs)
str(Mod8r3)
Mod8r3$opt$convergence
Mod8r3$SD$sd
#--------------------------------------------
# AIC
Model <- c("Obs",
"Temporal",
"Spatial",
"Spatial reduced",
"Spatial reduced 2",
"Spatiotemporal reduced",
# "Spatiotemporal reduced 2",
"Spatiotemporal reduced 3",
# "Temporal + ST",
# "S+T+ST",
"Spatial + Temporal",
"Spatial + Temporal reduced",
"Spatial + ST reduced 3",
"Spatial + ST reduced 3"
) #
M_num <- c("1",
"2",
"3",
"3r",
"3r2",
"4r",
# "4r2",
"4r3",
#5,
#6,
"7",
"7r",
"8r2",
"8r3"
)
AIC <- c(opt1b$AIC,
opt2b$AIC,
opt3b$AIC,
Mod3r$opt$AIC, #,
Mod3r2$opt$AIC,
Mod4r$opt$AIC,
# Mod4r2$opt$AIC,
Mod4r3$opt$AIC,
opt7b$AIC,
Mod7r$opt$AIC,
Mod8r2$opt$AIC,
Mod8r3$opt$AIC
) #
aic_table <- data.frame(M_num, Model, AIC, stringsAsFactors = FALSE)
names(aic_table) <- c("M_num", "Model", "AIC")
aic_table <- dplyr::arrange(aic_table, AIC)
aic_table$delta_AIC <- 0
for(i in 2:nrow(aic_table)) {
aic_table$delta_AIC[i] <- aic_table$AIC[i] - aic_table$AIC[1]
}
aic_table
# no additional spatial autocorrelation - maybe some temporal
# compare models with reduced covariates for best models and best model with no overdispersion
#----------- reduced Obs models w/no spatial ----------------
X_ij <- as.matrix(dplyr::select(covs, forest, temp_mean_winter, temp_mean_spring, prcp_mean_winter, prcp_mean_spring))
Options_vec = c("SpatialTF"=0, "TemporalTF"=0, "SpatiotemporalTF"=0, "DetectabilityTF"=1, "ObsModel"=1, "OverdispersedTF"=1, "abundTF"=0)
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod1r <- runOUGMRF(Inputs)
Mod1r$SD$sd
# Further Reduce
X_ij <- as.matrix(dplyr::select(covs, forest, temp_mean_spring, prcp_mean_winter))
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod1r2 <- runOUGMRF(Inputs)
Mod1r2$SD$sd
# final reduction - no time-varying covs
X_ij <- as.matrix(dplyr::select(covs, forest))
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod1r3 <- runOUGMRF(Inputs)
Mod1r2$SD$sd
#----------- reduced temporal AR1 models w/no spatial ----------------
X_ij <- as.matrix(dplyr::select(covs, forest, temp_mean_winter, temp_mean_spring, prcp_mean_winter, prcp_mean_spring))
Options_vec = c("SpatialTF"=0, "TemporalTF"=1, "SpatiotemporalTF"=0, "DetectabilityTF"=1, "ObsModel"=1, "OverdispersedTF"=1, "abundTF"=0)
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod2r <- runOUGMRF(Inputs)
Mod2r$SD$sd
# Further Reduce
X_ij <- as.matrix(dplyr::select(covs, forest, temp_mean_spring, prcp_mean_winter))
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod2r2 <- runOUGMRF(Inputs)
Mod2r2$SD$sd
# final reduction - no time-varying covs
X_ij <- as.matrix(dplyr::select(covs, forest))
# Make inputs
Inputs <- makeInput(family = family, df = df_yoy, c_ip = c_ip_yoy, options = Options_vec, X = X_ij, t_i = t_i, version = Version, offset_i = offset, CalcSD_lambda_ip = Calc_lambda_ip)
Mod2r3 <- runOUGMRF(Inputs)
Mod2r3$SD$sd
#---------------------------
# AIC
Model <- c("Obs",
"Obs reduced",
"Obs reduced 2",
"Obs reduced 3",
"Temporal",
"Temporal reduced",
"Temporal reduced 2",
"Temporal reduced 3",
"Spatiotemporal",
"Spatiotemporal reduced",
#"Spatiotemporal reduced 2",
"Spatiotemporal reduced 3",
#"Spatial",#,
# "Spatiotemporal",
# "Temporal + ST",
# "S+T+ST",
"Spatial + Temporal",
"Spatial + Temporal reduced",
"Spatial + Temporal reduced 2",
"Spatial + Temporal reduced 3"
# "Spatial + ST"
) #
M_num <- c("1",
"1r",
"1r2",
"1r3",
"2",
"2r",
"2r2",
"2r3",
"4",
"4r",
# "4r2",
"4r3",
"7",
"7r",
"7r2",
"7r3"
)
#k <- c(Mod1r$opt$k)
AIC <- c(opt1b$AIC,
Mod1r$opt$AIC,
Mod1r2$opt$AIC,
Mod1r3$opt$AIC,
opt2b$AIC,
Mod2r$opt$AIC,
Mod2r2$opt$AIC,
Mod2r3$opt$AIC,
opt4b$AIC,
Mod4r$opt$AIC,
#Mod4r2$opt$AIC,
Mod4r3$opt$AIC,
opt7b$AIC,
Mod7r$opt$AIC,
Mod7r2$opt$AIC,
Mod7r3$opt$AIC
) #
aic_table2 <- data.frame(M_num, AIC, stringsAsFactors = FALSE)
names(aic_table2) <- c("M_num", "AIC")
aic_table2 <- dplyr::arrange(aic_table2, AIC)
aic_table2$delta_AIC <- 0
for(i in 2:nrow(aic_table2)) {
aic_table2$delta_AIC[i] <- aic_table2$AIC[i] - aic_table2$AIC[1]
}
aic_table2
# better to keep all fixed effects
X_ij <- as.matrix(dplyr::select(covs, forest, surfcoarse, temp_mean_fall_1, temp_mean_winter, temp_mean_spring, prcp_mean_fall_1, prcp_mean_winter, prcp_mean_spring))
Parameters = colnames(as.matrix(X_ij))
X_r2 <- as.matrix(dplyr::select(covs, forest, temp_mean_spring, prcp_mean_winter))
Parameters_r2 <- colnames(as.matrix(X_r2))
summary(SD7b, "fixed", p.value = TRUE)
SD7b$par.fixed
Mod4 <- list(Report = Report4b, opt = opt4b, SD = SD4b)
save.image("Output/W_Susquehanna_YOY.RData")
save(Mod4, SD_table, aic_table, aic_table2, X_ij, Parameters, df = df_yoy, family, file = "Output/W_Susquehanna_YOY_Summary.RData")
saveRDS(list(df_yoy = df_yoy,
family = family,
Report4=Mod4$Report,
opt4=Mod4$opt,
SD4=Mod4$SD,
SD_table=SD_table,
Parameters = Parameters,
aic_table=aic_table,
aic_table2 = aic_table2),
file = "Output/W_Susquehanna_YOY_Summary_RDS.RData")
aic_table
aic_table2
SD5b$sd
SD_table
# AIC
Model <- c("Obs",
"Temporal",
"Spatial",
"Spatial reduced",
"Spatial reduced 2",
"Spatiotemporal reduced",
# "Spatiotemporal reduced 2",
"Spatiotemporal reduced 3",
"Temporal + ST",
# "S+T+ST",
"Spatial + Temporal",
"Spatial + Temporal reduced",
"Spatial + ST reduced 3",
"Spatial + ST reduced 3"
) #
M_num <- c("1",
"2",
"3",
"3r",
"3r2",
"4r",
# "4r2",
"4r3",
"5",
#6,
"7",
"7r",
"8r2",
"8r3"
)
AIC <- c(opt1b$AIC,
opt2b$AIC,
opt3b$AIC,
Mod3r$opt$AIC, #,
Mod3r2$opt$AIC,
Mod4r$opt$AIC,
# Mod4r2$opt$AIC,
Mod4r3$opt$AIC,
opt5b$AIC,
opt7b$AIC,
Mod7r$opt$AIC,
Mod8r2$opt$AIC,
Mod8r3$opt$AIC
) #
aic_table <- data.frame(M_num, Model, AIC, stringsAsFactors = FALSE)
names(aic_table) <- c("M_num", "Model", "AIC")
aic_table <- dplyr::arrange(aic_table, AIC)
aic_table$delta_AIC <- 0
for(i in 2:nrow(aic_table)) {
aic_table$delta_AIC[i] <- aic_table$AIC[i] - aic_table$AIC[1]
}
aic_table
# AIC
Model <- c("Obs",
"Temporal",
"Spatial",
"Spatial reduced",
"Spatial reduced 2",
"Spatiotemporal",
"Spatiotemporal reduced",
# "Spatiotemporal reduced 2",
"Spatiotemporal reduced 3",
"Temporal + ST",
# "S+T+ST",
"Spatial + Temporal",
"Spatial + Temporal reduced",
"Spatial + ST reduced 3",
"Spatial + ST reduced 3"
) #
M_num <- c("1",
"2",
"3",
"3r",
"3r2",
"4",
"4r",
# "4r2",
"4r3",
"5",
#6,
"7",
"7r",
"8r2",
"8r3"
)
AIC <- c(opt1b$AIC,
opt2b$AIC,
opt3b$AIC,
Mod3r$opt$AIC, #,
Mod3r2$opt$AIC,
opt4b$AIC,
Mod4r$opt$AIC,
# Mod4r2$opt$AIC,
Mod4r3$opt$AIC,
opt5b$AIC,
opt7b$AIC,
Mod7r$opt$AIC,
Mod8r2$opt$AIC,
Mod8r3$opt$AIC
) #
aic_table <- data.frame(M_num, Model, AIC, stringsAsFactors = FALSE)
names(aic_table) <- c("M_num", "Model", "AIC")
aic_table <- dplyr::arrange(aic_table, AIC)
aic_table$delta_AIC <- 0
for(i in 2:nrow(aic_table)) {
aic_table$delta_AIC[i] <- aic_table$AIC[i] - aic_table$AIC[1]
}
aic_table
Mod5 <- list(Report = Report5b, opt = opt5b, SD = SD5b)
save.image("Output/W_Susquehanna_YOY.RData")
save(Mod5, SD_table, aic_table, aic_table2, X_ij, Parameters, df = df_yoy, family, file = "Output/W_Susquehanna_YOY_Summary.RData")
saveRDS(list(df_yoy = df_yoy,
family = family,
Report5=Mod5$Report,
opt5=Mod5$opt,
SD5=Mod5$SD,
SD_table=SD_table,
Parameters = Parameters,
aic_table=aic_table,
aic_table2 = aic_table2),
file = "Output/W_Susquehanna_YOY_Summary_RDS.RData")
